"use client"
import { useState, useEffect } from "react"
import { Brain, MessageSquare, Sparkles, Bot, User, ArrowRight, Info, Zap, Code, Cpu } from "lucide-react"

interface NLPDemoProps {}

type Message = {
  id: number
  text: string
  type: "input" | "processed" | "output"
  explanation: string
  visible: boolean
}

const SAMPLE_CONVERSATION: Message[] = [
  {
    id: 1, 
    text: "Hey, how are you?", 
    type: "input",
    explanation: "Natural human language input that NLP will analyze",
    visible: false
  },
  {
    id: 2, 
    text: "TOKENIZATION → [Hey] [,] [how] [are] [you] [?]", 
    type: "processed",
    explanation: "Breaking down the text into individual meaningful units called tokens",
    visible: false
  },
  {
    id: 3, 
    text: "I'm doing well, thanks for asking!", 
    type: "output",
    explanation: "AI generates appropriate response based on processed input",
    visible: false
  },
  {
    id: 4, 
    text: "What's the weather like?", 
    type: "input",
    explanation: "Another example of natural language query",
    visible: false
  },
  {
    id: 5, 
    text: "ENTITIES → [weather = TOPIC] [like = QUERY]", 
    type: "processed",
    explanation: "Identifying key entities and their roles in the sentence",
    visible: false
  },
  {
    id: 6, 
    text: "It's sunny and warm today!", 
    type: "output",
    explanation: "Contextually relevant response generated by AI",
    visible: false
  }
]

export default function NLPDemo({}: NLPDemoProps) {
  const [messages, setMessages] = useState<Message[]>(SAMPLE_CONVERSATION)
  const [hoveredId, setHoveredId] = useState<number | null>(null)
  const [currentStep, setCurrentStep] = useState<number>(0)

  useEffect(() => {
    if (currentStep >= messages.length) return
    
    const timer = setTimeout(() => {
      setMessages(prev => prev.map((msg, i) => {
        if (i === currentStep) return {...msg, visible: true}
        return msg
      }))
      setCurrentStep(prev => prev + 1)
    }, 1500)

    return () => clearTimeout(timer)
  }, [currentStep, messages.length])

  const getMessageStyles = (type: string) => {
    switch(type) {
      case "input": return "bg-gradient-to-r from-blue-50 to-blue-100 text-blue-800 border-l-4 border-blue-500"
      case "processed": return "bg-gradient-to-r from-purple-50 to-purple-100 text-purple-800 border-l-4 border-purple-500"
      case "output": return "bg-gradient-to-r from-green-50 to-green-100 text-green-800 border-l-4 border-green-500"
      default: return "bg-gray-100"
    }
  }

  const getIcon = (type: string) => {
    switch(type) {
      case "input": return <User className="w-5 h-5" />
      case "processed": return <Cpu className="w-5 h-5 animate-pulse" />
      case "output": return <Bot className="w-5 h-5" />
      default: return null
    }
  }

  return (
    <div className="max-w-3xl mx-auto p-8 bg-white rounded-xl shadow-lg space-y-8">
      <div className="text-center space-y-4">
        <h2 className="text-4xl font-bold text-gray-800 flex items-center justify-center gap-3">
          <Brain className="w-10 h-10 text-blue-600" />
          Natural Language Processing
          <Sparkles className="w-10 h-10 text-blue-600" />
        </h2>
        <p className="text-lg text-gray-600 flex items-center justify-center gap-2">
          <Zap className="w-5 h-5 text-yellow-500" />
          Watch AI analyze and understand human language in real-time
          <Zap className="w-5 h-5 text-yellow-500" />
        </p>
      </div>

      <div className="space-y-4 relative">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`transform transition-all duration-500 ${
              message.visible ? "translate-x-0 opacity-100" : "translate-x-[-100px] opacity-0"
            }`}
            onMouseEnter={() => setHoveredId(message.id)}
            onMouseLeave={() => setHoveredId(null)}
          >
            <div className={`p-4 rounded-lg shadow-md ${getMessageStyles(message.type)} 
              flex items-center space-x-3 relative group hover:scale-102 transition-transform duration-300`}
            >
              {getIcon(message.type)}
              <span className="flex-1 font-medium">{message.text}</span>
              {hoveredId === message.id && (
                <div className="absolute -top-12 left-0 right-0 bg-gray-800 text-white p-2 rounded text-sm z-10">
                  <Info className="w-4 h-4 inline-block mr-2" />
                  {message.explanation}
                </div>
              )}
            </div>
          </div>
        ))}

        {currentStep < messages.length && (
          <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2">
            <Code className="w-6 h-6 text-blue-600 animate-bounce" />
          </div>
        )}
      </div>

      <div className="flex justify-center items-center gap-6 text-sm bg-gray-50 p-4 rounded-lg">
        <div className="flex items-center gap-2 text-blue-700">
          <User className="w-5 h-5" /> Human Input
        </div>
        <ArrowRight className="w-5 h-5 text-gray-400" />
        <div className="flex items-center gap-2 text-purple-700">
          <Cpu className="w-5 h-5" /> NLP Analysis
        </div>
        <ArrowRight className="w-5 h-5 text-gray-400" />
        <div className="flex items-center gap-2 text-green-700">
          <Bot className="w-5 h-5" /> AI Response
        </div>
      </div>
    </div>
  )
}